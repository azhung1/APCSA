//Rook
public class Rook extends Piece
{
  public boolean hasMoved;
  public Rook(boolean w, Board n)
  {
    super.Piece(w, n);
    hasMoved = false;
  }
  public Rook(boolean f, Board n, Location p)
  {
    super.Piece(f, n,p);
    hasMoved = false;
  }
  public boolean move(Location f)
  {
    int moveR = f.getRow();
    int moveC = f.getCol();
    Location original = this.myLocation();
    int r = original.getRow();
    int c = original.getCol();
    Boolean occupied = false;
    hasMoved = true;

    if(moveR == r)
    {
      if((moveC - c) > 0)
      {
      for (int a = 1; a <Math.abs(moveC - c); a++)
      {
        if (myBoard.isEmpty(new Location(r,(c+a)))==false)
        {
          occupied = true;
        }
      }
      }
      else
      {
         for (int a = 1; a <Math.abs(moveC - c); a++)
      {
        if (myBoard.isEmpty(new Location(r,(c-a)))==false)
        {
          occupied = true;
        }
      }
    }
    }
    if(moveC == c)
    {
      if((moveR - r) > 0)
      {
      for (int a = 1; a <Math.abs(moveR - r); a++)
      {
        if (myBoard.isEmpty(new Location((r+a),c))==false)
        {
          occupied = true;
        }
      }
    }
      else
      {
         for (int a = 1; a <Math.abs(moveR - r); a++)
      {
     
        if (myBoard.isEmpty(new Location((r-a),c))==false)
        {
          occupied = true;
        }
      }
    }
    }
    if(occupied == true)
    {
      return false;
    }
    if(myBoard.getPiece(f)!= null)
    {
    if(myBoard.getPiece(f).isWhite() == this.isWhite())
    { 
      return false;
    }
    }
    return true;
  }
  public String toString()
  {
    String results = "r";
    if(this.isWhite() == false)
      results = results.toUpperCase();

    return results;
  }
}
