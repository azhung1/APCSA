//King
public class King extends Piece
{
  public King(boolean w, Board n)
  {
    super.Piece(w, n);
  }
  public King(boolean f, Board n, Location p)
  {
    super.Piece(f, n, p);
  }
  public boolean move(Location f)
  {
    int moveR = f.getRow();
    int moveC = f.getCol();
    Location original = this.myLocation();
    int r = original.getRow();
    int c = original.getCol();
    int difference = Math.abs(moveR -r);
    int move1r = r +1;
    int move1c = c +1;
    
    int move2r = r +1;
    int move2c = c;
    
    int move3r = r -1;
    int move3c = c;
    
    int move4r = r -1;
    int move4c = c -1;
    
    int move5r = r ;
    int move5c = c +1;
    
    int move6r = r ;
    int move6c = c -1;
    
    int move7r = r +1;
    int move7c = c -1;
    
    int move8r = r -1;
    int move8c = c +1;
    
    if(r == move1r || r == move2r || r == move3r || r == move4r || r == move5r ||r == move6r || r == move7r || r == move8r 
         && c == move1c || c == move2c || c == move3c || c == move4c || c == move5c || c == move6c || c == move7c || c == move8c)
    {
      if(myBoard.getPiece(f) != null)
      {
        if(myBoard.getPiece(f).isWhite() != this.isWhite())
        {
          return true;
        }
      }
    }
    else if(myBoard.getPiece(new Location (7,5)) != null && myBoard.getPiece(new Location (7,6))!= null
              ||myBoard.getPiece(new Location (0,5)) != null && myBoard.getPiece(new Location (0,6))!= null)
    {
//      if()
//      {
//      }
    }
    return true;
  }
  public String toString()
  {
    String results ="k";
    if(this.isWhite() == false)
      results = results.toUpperCase();
    return results;
  }
}